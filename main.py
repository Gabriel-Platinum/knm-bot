import telebot
import datetime
import calendar
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton,InputMediaPhoto
import bcrypt

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
from db import (
    get_all_users,
    get_user_by_username,
    get_user_by_id,
    get_admin_by_username,
    add_user_to_db,
    update_username,
    update_password,
    delete_user_from_db,
    link_telegram_id,
)

# --- –ó–Ω–∞—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
from db import (
    get_user_badges,
    get_user_badges_by_telegram_id,
    get_badge_status,
    update_badge_status,
    update_badge_date,
    delete_user_badge,
    add_existing_badge_to_user,
    get_badge_name_by_id
)

# --- –í—Å–µ –∑–Ω–∞—á–∫–∏ ---
from db import get_all_badges


from config import BOT_TOKEN, ADMIN_USERNAME, ADMIN_PASSWORD_HASH

bot = telebot.TeleBot(BOT_TOKEN)
user_sessions = {}  

#–î–ï–§–û–õ–¢ –ü–ê–ù–ï–õ–¨

@bot.message_handler(commands=['start'])
def start(message):
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ \"Aus vielen ein Ganzes\" üåü\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–æ–µ–∫—Ç—É.\n\n"
        "–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω—ã—Ö —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥, –∞ –¥–∞–ª—å—à–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫:\n"
        "1. –ö–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∏ —Å–∫–æ–ª—å–∫–æ –µ—â—ë –Ω—É–∂–Ω–æ –¥–æ–Ω–∞–±—Ä–∞—Ç—å\n"
        "2. –°–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç –ø–æ–ª—É—á–µ–Ω–∏—è\n"
        "3. –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞\n"
        "4. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –∑–Ω–∞—á–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª (–Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å - –ø–æ–ª—É—á–µ–Ω/–Ω–µ –ø–æ–ª—É—á–µ–Ω)\n"
        "5. –ö –∫–æ–º—É –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–∫–ª–µ–π–∫–∏ (–∑–Ω–∞—á–∫–∞)\n"
        "6. –ö –∫–æ–º—É –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è (–∫—É—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞)\n"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    login_button = types.KeyboardButton("–í–æ–π—Ç–∏")
    markup.add(login_button)

    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    
    
#–ª–æ–≥–∏–Ω —é–∑–µ—Ä–∞
@bot.message_handler(func=lambda m: m.text == "–í–æ–π—Ç–∏")
def ask_username(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(message, get_username)

def get_username(message):
    username = message.text.strip().lower()  
    user = get_user_by_username(username)
    if user is None:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, login_user, username)
    

def login_user(message, username):
    password = message.text.strip()
    user = get_user_by_username(username.lower())  

    if user is None:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id, user_username, stored_password, tg_id = user
    current_tg_id = message.from_user.id

    if bcrypt.checkpw(password.encode('utf-8'), stored_password.encode('utf-8')):
        if tg_id:
            if tg_id != current_tg_id:
                bot.send_message(
                    message.chat.id,
                    "üö´ –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram-–ø—Ä–æ—Ñ–∏–ª—é."
                )
                return
        else:
            link_telegram_id(user_id, current_tg_id)

        user_sessions[message.chat.id] = user_id

        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–∏", callback_data="badges_received"),
            InlineKeyboardButton("–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è", callback_data="badges_pending"),
            InlineKeyboardButton("–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π", callback_data="days_remaining"),
            InlineKeyboardButton("–í—Å–µ –∑–Ω–∞—á–∫–∏", callback_data="all_badges"),
            InlineKeyboardButton("–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–ª–µ–π–∫—É", callback_data="get_sticker")
        )

        bot.send_message(message.chat.id, "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        
#–§–£–ù–ö–¶–ò–ò –Æ–ó–ï–†–ê

# –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "badges_received")
def show_badges(call):
    user_id = user_sessions.get(call.message.chat.id)

    if not user_id:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    badges = get_user_badges(user_id)

    if not badges:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–Ω–∞—á–∫–æ–≤.")
        return

    for badge in badges:
        id, name, image_path, status, date_received = badge
        status_text = "‚úÖ –ü–æ–ª—É—á–µ–Ω" if status == "–ø–æ–ª—É—á–µ–Ω" else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"

        
        date_text = f"üìÖ {date_received}" if date_received else "üìÖ –î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        caption = f"üèÖ *{name}*\n —Å—Ç–∞—Ç—É—Å: {status_text}\n –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–∫–∞: {date_text}"
        print(f"Image Path: {image_path}")  # –í—ã–≤–æ–¥–∏–º –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –¥–ª—è –¥–µ–±–∞–≥–∞
        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo, caption=caption, parse_mode="Markdown")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"{name}\n{status_text}\n{date_text}\n(‚ö†Ô∏è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")


#–æ–∂–∏–¥–∞—é—â–∏–µ –∑–Ω–∞—á–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "badges_pending")
def handle_pending_badges(call):
    user_id = call.from_user.id
    badges = get_user_badges_by_telegram_id(user_id)

    if not badges:
        return bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–Ω–∞—á–∫–æ–≤.")
    for badge in badges:
     print(f"[DEBUG] –ó–Ω–∞—á–æ–∫: {badge[0]}, –°—Ç–∞—Ç—É—Å: '{badge[2]}'")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–Ω–∞—á–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å "–Ω–µ –ø–æ–ª—É—á–µ–Ω"
    pending_badges = [badge for badge in badges if badge[2] == "–Ω–µ –ø–æ–ª—É—á–µ–Ω"]

    if not pending_badges:
        return bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–Ω–∞—á–∫–æ–≤. üéâ")

    media_group = []

    for name, image_path, status, date_received in pending_badges[:10]:  # –¥–æ 10 —à—Ç—É–∫ ‚Äî –ª–∏–º–∏—Ç Telegram
        status_text = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"
        date_text = f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–∫–∞: {date_received}"  
        caption = f"üè∑ *{name}*\n–°—Ç–∞—Ç—É—Å: {status_text}\n{date_text}"

        image_file_path = image_path
        
        try:
            with open(image_file_path, 'rb') as img:
                media = InputMediaPhoto(img.read(), caption=caption, parse_mode="Markdown")
                media_group.append(media)
        except FileNotFoundError:
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–Ω–∞—á–∫–∞: {name}")

    if media_group:
        bot.send_media_group(call.message.chat.id, media_group)

# –û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π
@bot.callback_query_handler(func=lambda call: call.data == "days_remaining")
def handle_remaining_days(call):
    def get_days_until_end_of_quarter():
        today = datetime.date.today()
        year = today.year
        month = today.month

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü –∫–≤–∞—Ä—Ç–∞–ª–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
        if 5 <= month <= 7:  # –º–∞–π-–∏—é–ª—å
            end_month = 7
        elif 8 <= month <= 10:  # –∞–≤–≥—É—Å—Ç-–æ–∫—Ç—è–±—Ä—å
            end_month = 10
        elif month == 11 or month == 12 or month == 1:  # –Ω–æ—è–±—Ä—å-—è–Ω–≤–∞—Ä—å
            if month == 1:
                year -= 1  # —è–Ω–≤–∞—Ä—å ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–≤–∞—Ä—Ç–∞–ª—É –Ω–æ—è–±—Ä—å-—è–Ω–≤–∞—Ä—å
            end_month = 1
        else:  # —Ñ–µ–≤—Ä–∞–ª—å-–∞–ø—Ä–µ–ª—å
            end_month = 4

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        if end_month == 1:
            end_date = datetime.date(year + 1, 1, calendar.monthrange(year + 1, 1)[1])
        else:
            end_date = datetime.date(year, end_month, calendar.monthrange(year, end_month)[1])

        remaining_days = (end_date - today).days
        return remaining_days

    days_remaining = get_days_until_end_of_quarter()
    weeks = days_remaining // 7
    days = days_remaining % 7

    message = f"üìÖ –î–æ –∫–æ–Ω—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω–µ–π\n" \
              f"üóìÔ∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ {weeks} –Ω–µ–¥–µ–ª—å –∏ {days} –¥–Ω–µ–π."

    bot.send_message(call.message.chat.id, message)

# –≤—Å–µ –∑–Ω–∞—á–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "all_badges")
def handle_all_badges(call):
    badges = get_all_badges()

    if not badges:
        bot.send_message(call.message.chat.id, "–ó–Ω–∞—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for _, name, image_path in badges:
        caption = f"üèÖ *{name}*"
        try:
            with open(image_path, 'rb') as img:
                bot.send_photo(call.message.chat.id, img, caption=caption, parse_mode="Markdown")
        except FileNotFoundError:
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {name}")
        
# –ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–ª–µ–π–∫—É
@bot.callback_query_handler(func=lambda call: call.data == "get_sticker")
def handle_get_sticker(call):
    text = "üéâ –ù–∞–∫–ª–µ–π–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª—é–±–æ–µ —Å—É–±–±–æ—Ç–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É –∫—É—Ä–∞—Ç–æ—Ä–∞!"
    bot.send_message(call.message.chat.id, text)
    
#   –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ê

admin_sessions = set()
admin_login_temp = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º –ª–æ–≥–∏–Ω—ã, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∫ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–∞—Ä–æ–ª—å

#–≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin'])
def admin_login_start(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(message, get_admin_login)

def get_admin_login(message):
    username = message.text.strip().lower()  # üëà –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    admin_data = get_admin_by_username(username)

    if admin_data:
        stored_username, stored_hash = admin_data
        admin_login_temp[message.chat.id] = (stored_username, stored_hash)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(message, get_admin_password)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



def get_admin_password(message):
    user_id = message.chat.id
    password = message.text.strip()

    if user_id in admin_login_temp:
        username, stored_hash = admin_login_temp[user_id]

        
        username = username.lower()

        if bcrypt.checkpw(password.encode(), stored_hash.encode()):
            admin_sessions.add(message.from_user.id)
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *{username}* —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª.", parse_mode="Markdown")
            send_admin_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        
        del admin_login_temp[user_id]
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /admin.")

        
# –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞       
def send_admin_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    
    
    
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –∞–¥–º–∏–Ω–∞
user_states = {}

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def ask_for_login(message):
    if message.from_user.id not in admin_sessions:
        return bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω.")
    
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–∏–¥–∏–Ω–∞—Ö—É–π' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):"
    )
    user_states[message.chat.id] = {"action": "waiting_for_login"}

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("action") == "waiting_for_login")
def ask_for_password(message):
    if message.text.strip().lower() == "–∏–¥–∏–Ω–∞—Ö—É–π":
        user_states.pop(message.chat.id, None)
        return bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    username = message.text.strip().lower()  # üëà –ª–æ–≥–∏–Ω –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if get_user_by_username(username):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:")
        return 
    
    user_states[message.chat.id] = {"action": "waiting_for_password", "username": username}
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–∏–¥–∏–Ω–∞—Ö—É–π' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):"
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("action") == "waiting_for_password")
def add_user(message):
    if message.text.strip().lower() == "–∏–¥–∏–Ω–∞—Ö—É–π":
        user_states.pop(message.chat.id, None)
        return bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    password = message.text.strip().lower()  # üëà –ø–∞—Ä–æ–ª—å —Ç–æ–∂–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    username = user_states[message.chat.id]["username"]
    success = add_user_to_db(username, password)

    if success:
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{username}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    user_states.pop(message.chat.id, None)


    
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
def view_all_users(message):
    if message.from_user.id not in admin_sessions:
        return bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω.")

    users = get_all_users()
    if not users:
        return bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    markup = types.InlineKeyboardMarkup()
    for user_id, username in users:
        markup.add(types.InlineKeyboardButton(text=username, callback_data=f"view_user_{user_id}"))

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", reply_markup=markup)
    
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("view_user_"))
def handle_user_click(call):
    user_id = int(call.data.split("_")[-1])
    user = get_user_by_id(user_id)  
    if not user:
        return bot.send_message(call.message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    username, hashed_password, tg_id= user[1], user[2], user[3]

    
    badges = get_user_badges(user_id)

    
    if badges:
        badges_text = "\n".join([f"üèÖ {badge_name} ‚Äî {status} (–î–∞—Ç–∞: {date_received})" for _, badge_name, _, status, date_received in badges])
    else:
        badges_text = "–ù–µ—Ç –∑–Ω–∞—á–∫–æ–≤."

   
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"–ù–∏–∫: <b>{username}</b>\n"
        f"–•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <b>{hashed_password}</b>\n"
        f"Telegram id: <b>{tg_id}</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤: <b>{len(badges)}</b>\n\n"
        f"üéñÔ∏è –ó–Ω–∞—á–∫–∏:\n{badges_text}"
    )

    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"edit_user_{user_id}"))
    markup.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{user_id}"))
    markup.add(InlineKeyboardButton(text="üéñÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–∫–∏", callback_data=f"edit_badges_{user_id}"))
    markup.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–æ–∫", callback_data=f"add_badge_{user_id}"))

    bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    
# –∑–Ω–∞—á–∫–∏ - –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_badges_"))
def handle_edit_badges(call):
    user_id = int(call.data.split("_")[-1])
    badges = get_user_badges(user_id)

    if not badges:
        return bot.send_message(call.message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–Ω–∞—á–∫–æ–≤.")

    markup = InlineKeyboardMarkup()
    for badge in badges:
        badge_id, badge_name, _, status, _ = badge
        markup.add(
            InlineKeyboardButton(
                text=f"{badge_name} ({status})",
                callback_data=f"editbadge|{user_id}|{badge_id}"
            )
        )

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("editbadge|"))
def handle_single_badge_edit(call):
    parts = call.data.split("|")
    user_id = int(parts[1])
    badge_id = int(parts[2])
    
    

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status|{user_id}|{badge_id}"),
        InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"change_date|{user_id}|{badge_id}"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–æ–∫", callback_data=f"delete_badge|{user_id}|{badge_id}")
    )

    bot.send_message(call.message.chat.id, f"–í—ã–±—Ä–∞–Ω –∑–Ω–∞—á–æ–∫ ID {badge_id}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)


#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞–∏—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_date"))
def handle_change_date_prompt(call):
    try:
        _, user_id, badge_id = call.data.split("|")
        user_id = int(user_id)
        badge_id = int(badge_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–Ω–∞—á–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda msg: update_date_step(msg, user_id, badge_id))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        
    def update_date_step(message, user_id, badge_id):
     date_text = message.text.strip()

     # –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
     try:
         datetime.datetime.strptime(date_text, "%Y-%m-%d")
     except ValueError:
         return bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ì–ì–ì–ì-–ú–ú-–î–î).")

     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ
     update_badge_date(user_id, badge_id, date_text)
     bot.send_message(message.chat.id, f"üìÖ –î–∞—Ç–∞ –∑–Ω–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {date_text}.")



#–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_status"))
def handle_change_status(call):
    try:
        _, user_id, badge_id = call.data.split("|")
        user_id = int(user_id)
        badge_id = int(badge_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_status = get_badge_status(user_id, badge_id)
        if not current_status:
            return bot.answer_callback_query(call.id, "–ó–Ω–∞—á–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = "–Ω–µ –ø–æ–ª—É—á–µ–Ω" if current_status == "–ø–æ–ª—É—á–µ–Ω" else "–ø–æ–ª—É—á–µ–Ω"
        update_badge_status(user_id, badge_id, new_status)

        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –∑–Ω–∞—á–∫–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{new_status}</b>.", parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞.")

#—É–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_badge"))
def handle_delete_badge(call):
    try:
        _, user_id, badge_id = call.data.split("|")
        user_id = int(user_id)
        badge_id = int(badge_id)

        # –£–¥–∞–ª—è–µ–º –∑–Ω–∞—á–æ–∫
        delete_user_badge(user_id, badge_id)

        bot.send_message(call.message.chat.id, "‚úÖ –ó–Ω–∞—á–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        
        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–∫–∞.")


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_badge_"))
def handle_add_badge_start(call):
    user_id = int(call.data.split("_")[-1])
    badges = get_all_badges()

    if not badges:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    for badge_id, badge_name, _ in badges:
        callback_data = f"select_badge|{user_id}|{badge_id}"
        markup.add(InlineKeyboardButton(text=badge_name, callback_data=callback_data))

    bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user_id}:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_badge|"))
def handle_select_badge(call):
    try:
        _, user_id, badge_id = call.data.split("|")
        user_id = int(user_id)
        badge_id = int(badge_id)

        status = "–Ω–µ –ø–æ–ª—É—á–µ–Ω"
        date_received = datetime.datetime.now()
        add_existing_badge_to_user(user_id, badge_id, status, date_received)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–Ω–∞—á–∫–∞ –ø–æ ID
        badge_name = get_badge_name_by_id(badge_id)  # –Ω–∞–ø–∏—à–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç

        bot.send_message(call.message.chat.id, f"‚úÖ –ó–Ω–∞—á–æ–∫ '{badge_name}' –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–∫–∞.")





#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —é–∑–µ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_user_"))
def edit_user_menu(call):
    user_id = int(call.data.split("_")[2])
    user = get_user_by_id(user_id)

    if not user:
        return bot.send_message(call.message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    username = user[1]  
    

    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω", callback_data=f"change_username_{user_id}"),
        InlineKeyboardButton("üîí –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"change_password_{user_id}")
    )
    markup.row(
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{user_id}")
    )
    

    text = f"üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n\n"
    bot.send_message(call.message.chat.id, text, reply_markup=markup)

#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ 
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_username_"))
def ask_new_username(call):
    user_id = int(call.data.split("_")[2])
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(msg, process_new_username, user_id)
def process_new_username(message, user_id):
    new_username = message.text.strip()

    if not new_username:
        bot.send_message(message.chat.id, "‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    update_username(user_id, new_username)
    bot.send_message(message.chat.id, f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {new_username}")
    
#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_password_"))
def ask_new_password(call):
    user_id = int(call.data.split("_")[2])
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(msg, process_new_password, user_id)

def process_new_password(message, user_id):
    new_password = message.text.strip()

    if not new_password:
        bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt(12)).decode('utf-8')

    update_password(user_id, hashed_password)
    bot.send_message(message.chat.id, "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

#—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–Ω–æ???
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_user_"))
def delete_user_handler(call):
    user_id = int(call.data.split("_")[2])

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    bot.send_message(call.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}?", reply_markup=markup)
#—Ç–æ—á–Ω–æ, –±—Ä–∞—Ç
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_"))
def confirm_delete_user(call):
    user_id = int(call.data.split("_")[2])

    delete_user_from_db(user_id)
    bot.send_message(call.message.chat.id, f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω.")
#–æ—Ç–º–µ–Ω–∞, –±—Ä–∞—Ç
@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_delete(call):
    bot.send_message(call.message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")






#–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –ª–æ–≥–∏–Ω—É
@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É")
def search_user_by_login_prompt(message):
    if message.from_user.id not in admin_sessions:
        return bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω.")
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, search_user_by_login)

def search_user_by_login(message):
    username = message.text.strip().lower()  # üëà –ª–æ–≥–∏–Ω –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    user = get_user_by_username(username)
    
    if user:
        user_id, username, hashed_password, tg_id = user[0], user[1], user[2],user[3]
        badges = get_user_badges_by_telegram_id(tg_id)

        if badges:
            badges_text = "\n".join([f"üèÖ {badge_name} ‚Äî {status} (–î–∞—Ç–∞: {date_received})" for badge_name, _, status, date_received in badges])
        else:
            badges_text = "–ù–µ—Ç –∑–Ω–∞—á–∫–æ–≤."

        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"–ù–∏–∫: <b>{username}</b>\n"
            f"–•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <b>{hashed_password}</b>\n"
            f"Telegram id: <b>{tg_id}</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤: <b>{len(badges)}</b>\n\n"
            f"üéñÔ∏è –ó–Ω–∞—á–∫–∏:\n{badges_text}"
        )

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"edit_user_{user_id}"))
        markup.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{user_id}"))
        markup.add(InlineKeyboardButton(text="üéñÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–∫–∏", callback_data=f"edit_badges_{user_id}"))
        markup.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–æ–∫", callback_data=f"add_badge_{user_id}"))

        bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")



@bot.callback_query_handler(func=lambda call: True)
def debug_callback(call):
    print(f"CALLBACK DATA: {call.data}")


bot.polling(none_stop=True)
